class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def construct_bst(level_order):
    if not level_order:
        return None
    
    root = Node(level_order[0])
    queue = [root]
    i = 1
    
    while i < len(level_order):
        current_node = queue.pop(0)
        
        # Create a new node with the value of the next element in the level order traversal
        new_node = Node(level_order[i])
        
        # Assign the new node as the left child if the current node doesn't have one
        if current_node.left is None:
            current_node.left = new_node
            queue.append(new_node)
            i += 1
        else:
            # Assign the new node as the right child
            current_node.right = new_node
            queue.append(new_node)
            i += 1
    
    return root

# Test case
level_order = [7, 4, 12, 3, 6, 8, 1, 5, 10]
root = construct_bst(level_order)

# Function to perform an in-order traversal of the BST (for testing)
def inorder(node):
    if node is not None:
        inorder(node.left)
        print(node.val, end=' ')
        inorder(node.right)

inorder(root)  # Output: 1 3 4 5 6 7 8 10 12
